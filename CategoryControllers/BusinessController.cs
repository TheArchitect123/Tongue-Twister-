// This file has been autogenerated from a class added in the UI designer.

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;

using ObjCRuntime;
using CoreFoundation;
using Foundation;
using UIKit;
using CoreGraphics;


namespace FrenchPhraseBook
{
	public partial class BusinessController : UITableViewController
	{

		UIButton button = new UIButton(UIButtonType.Custom);
		UILabel favouritesIndicator = new UILabel(); 

		public AppDelegate application {
			get {
				return (AppDelegate)UIApplication.SharedApplication.Delegate; 
			}
		}

		UIBarButtonItem searchBack = new UIBarButtonItem();

		UIBarButtonItem favouritesButton = new UIBarButtonItem();
		UIBarButtonItem completeFavourite = new UIBarButtonItem();

		UIImage imageFav = new UIImage("FavouriteSelected.png");

		public List<string> companyDict = new List <string>(){
			{"I'm a freelancer"}, {"I work part time here"}, {"I work full time here"}, {"Can I make an appointment"},
			{"Do you work here?"},{"He's my boss"},{"I'm the manager here"},{"Where can I find the manager?"},
			{"Where can I find the nearest work station?"},{"Employee"},{"Boss"},{"Employer"},{"I own this company"},{"Who's in charge here?"},{"I've worked here for 20 years"},
			{"Company"},{"Business"},{"I am a business man"},{"Director"},{"Sales team"},{"Programmer"},
			{"Senior programmer"},{"Employment agency"},{"This is my advertising agency"},{"This is my website"},{"This is the internet"},
			{"I designed this..."},{"Thank you for the interview"},{"You're hired"},{"Welcome to..."},{"Sales manager"},
			{"Dear Mr/Mrs..."},{"Dear Sir/Madam"},{"We would like to hire..."},{"I need your services"},{"I've read your letter"},
			{"Chief Executive Officer"},{"Receptionist"},{"I want a job here"},{"Are you hiring?"},{"Do you have any vacancies?"},{"Currently I work for..."},
			{"I work on a casual basis"},{"Return on Investment"},{"Profit"},{"Cost"},{"Revenue"},{"Client"},{"Email"},{"This is my website"},
			{"I am a web developer"},{"I am an iOS engineer"},{"I make apps for a living"},{"Dear..."},{"To whom it may concern..."},{"My annual income is..."},
			{"I sell..."},{"We sell..."},{"This company produces..."},{"We are a software company"},
			{"I have a meeting with..."},{"I have an appointment at..."},{"Driver"},{"Supervisor"},{"Trainee"},{"Income tax"},{"State Taxes"},
			{"Federal income tax"},{"How much tax do you pay?"},{"Stimulate growth in the economy"},{"Lowering taxes"}
		};

		public List<string> favourites = new List<string>(){
			{"⭐"}, {"⭐"}, {"⭐"}, {"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},{"⭐"},
			{"⭐"},{"⭐"},{"⭐"},{"⭐"}
		};

		Dictionary<int, string> companyTranslatedDict = new Dictionary<int, string> {
			{0,"Je suis un pigiste"}, {1,"Je travaille à temps partiel ici"},{2,"Je travaille à temps plein ici"},{3,"Puis-je faire un rendez-vous"},{4,"Est-ce que tu travailles ici?"},
			{5,"Il est mon patron"},{6,"Je suis le gestionnaire ici"},{7,"Où puis-je trouver le gestionnaire?"},{8,"Où puis -je trouver le poste de travail le plus proche?"},{9,"Employé"},{10,"Patron"},{11,"Employeur"},
			{12,"Je possède cette société"},{13,"Qui est responsable ici?"},{14,"Je travaille ici depuis 20 ans"},{15,"Compagnie"},{16,"Entreprise"},{17,"Je suis un homme d'affaire"},{18,"Réalisateur"},{19,"Équipe de vente"},
			{20,"Programmeur"},{21,"Programmeur senior"},{22,"Agence d'emploi"},{23,"Ceci est mon agence de publicité"},{24,"Ceci est mon site"},{25,"Ceci est l'Internet"},{26,"J'ai conçu cette..."},{27,"Merci pour l'interview"},
			{28,"Nous vous offrons le poste"},{29,"Bienvenue à..."},{30,"Directeur commercial"},{31,"Cher Monsieur / Madame..."},{32,"Cher Monsieur / Madame..."},{33,"Nous aimerions embaucher..."},{34,"J'ai besoin de vos services"},
			{35,"J'ai lu votre lettre"},{36,"Directeur Général"},{37,"Réceptionniste"},{38,"Je veux un emploi ici"},{39,"Embauchez-vous?"},{40,"Avez-vous des postes vacants?"},{41,"Actuellement, je travaille pour..."},{42,"Je travaille sur une base occasionnelle"},
			{43,"Retour sur investissement"},{44,"Le profit"},{45,"Coût"},{46,"Revenu"},{47,"Client"},{48,"Email"},{49,"Ceci est mon site"},{50,"Je suis un développeur web"},{51,"Je suis un ingénieur iOS"},
			{52,"Je fais des applications pour une vie"},{53,"cher..."},{54,"À qui cela concerne..."},{55,"Mon revenu annuel est..."},{56,"je vends..."},{57,"Nous vendons..."},{58,"Cette société produit..."},{59,"Nous sommes une société de logiciels"},
			{60,"J'ai une réunion avec..."},{61,"J'ai un rendez-vous à..."},{62,"Chauffeur"},{63,"Superviseur"},{64,"Stagiaire"},{65,"Impôt sur le revenu"},{66,"État taxes"},{67,"Taxe fédérale sur le revenu"},{68,"Combien d'impôts payez -vous?"},
			{69,"Stimuler la croissance dans l'économie"},{70,"Réduire les impôts"}
		};


		string companyID = "company";

		public BusinessController(IntPtr handle) : base(handle)
		{
		}

		public BusinessController() { }


		public override void ViewDidAppear(bool animated) {
			this.TableView.ReloadData();
			NSIndexPath index = NSIndexPath.FromRowSection(this.application.index, 0);

			Console.WriteLine("Index: " + index.Row);
			if (this.application.tabBarID == 1) 
			{
				Console.WriteLine("wtf?");
				this.TableView.ScrollToRow(index, UITableViewScrollPosition.Top, true);
				this.TableView.SelectRow(index, true, UITableViewScrollPosition.Top);

				BatteryMonitor AI = new BatteryMonitor();
				AI.frenchPhraseBookAI(this.companyTranslatedDict[index.Row]);
			}
			else if(this.application.tabBarID == 0) {
				if (this.application.localizedText.Count == 1)
				{
					this.application.cellBusiness.AccessoryView = this.favouritesIndicator;
					this.application.cellBusiness.EditingAccessoryView = this.favouritesIndicator;
					this.TableView.ReloadData();
				}
			}

			if (this.application.localizedText.Count == 1)
			{
				this.application.cellBusiness.AccessoryView = this.favouritesIndicator;
				this.application.cellBusiness.EditingAccessoryView = this.favouritesIndicator;
				this.TableView.ReloadData();
			}
		}

		public override nfloat EstimatedHeight(UITableView tableView, NSIndexPath indexPath)
		{
			return 80.0f;
		}

		public override void ViewDidLoad()
		{
			this.TableView.ReloadData();
			UITextAttributes heartSize = new UITextAttributes();
			heartSize.Font = UIFont.SystemFontOfSize(30.0f);

			this.favouritesButton.SetTitleTextAttributes(heartSize, UIControlState.Normal);
			this.favouritesButton.SetTitleTextAttributes(heartSize, UIControlState.Highlighted);

			this.NavigationItem.SetRightBarButtonItem(this.favouritesButton = new UIBarButtonItem("⭐", UIBarButtonItemStyle.Plain, (object sender, EventArgs e) =>
			{
				
				this.completeFavourite = new UIBarButtonItem("Finished", UIBarButtonItemStyle.Plain, (object sender_2, EventArgs e_2) =>
				{
					this.TableView.SetEditing(false, true);
					this.NavigationItem.SetRightBarButtonItem(this.favouritesButton, true);
				});

				this.NavigationItem.SetRightBarButtonItem(this.completeFavourite, true);

				this.TableView.SetEditing(true, true);
			}), false);




			UIBarButtonItem optionButton = new UIBarButtonItem("<\ud83d\udcb3", UIBarButtonItemStyle.Plain, (object sender, EventArgs e) =>
			{
				this.NavigationController.PopViewController(true);
			});

			UIBarButtonItem searchBack = new UIBarButtonItem("<\ud83d\udd0d", UIBarButtonItemStyle.Plain, (object sender, EventArgs e) =>
			{
				this.NavigationController.PopViewController(true);
				this.application.search.BecomeFirstResponder();
			});

			searchBack.TintColor = UIColor.Blue; 

			optionButton.TintColor = UIColor.Blue;

			this.NavigationItem.Title = "Company & Business";

			if(this.application.tabBarID == 0) {
				this.NavigationItem.SetLeftBarButtonItem(optionButton, true);	
			}
			else if(this.application.tabBarID == 1) {
				this.NavigationItem.SetLeftBarButtonItem(searchBack, true);
			}
			this.TableView.SeparatorColor = UIColor.Gray;
			this.TableView.RowHeight = 70.0f;
		}

		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			//check if the table data has changed before redrawing the table cells
			UITableViewCell BusinessCell = tableView.DequeueReusableCell(this.companyID);

			if (BusinessCell == null)
			{
				BusinessCell = new UITableViewCell(UITableViewCellStyle.Subtitle, this.companyID);
			}


			this.application.cellBusiness = BusinessCell; 

			this.favouritesIndicator = new UILabel();
			this.favouritesIndicator.Text = "\ud83d\udc9d";
			//this.favouritesIndicator.Text = "⭐";
			this.favouritesIndicator.MinimumFontSize = 24.0f;
			this.favouritesIndicator.AdjustsFontSizeToFitWidth = true;
			this.favouritesIndicator.Frame = new CoreGraphics.CGRect(0, 20, 40, 40);

			BusinessCell.TextLabel.Text = this.companyDict[indexPath.Row];
			BusinessCell.DetailTextLabel.Text = this.companyTranslatedDict[indexPath.Row];
			BusinessCell.DetailTextLabel.TextColor = UIColor.Gray;
			BusinessCell.DetailTextLabel.Font = UIFont.SystemFontOfSize(12.5f);

			if(BusinessCell.EditingStyle == UITableViewCellEditingStyle.Insert) {
				this.application.cellBusiness.AccessoryView = null;
				this.application.cellBusiness.EditingAccessoryView = null;
			}

			if(this.application.localizedText.Count == 0) {
				this.application.cellBusiness.AccessoryView = null;
				this.application.cellBusiness.EditingAccessoryView = null;
			}

			else if (this.application.localizedText.Count >= 1)
			{
				if (this.application.localizedText.Count == 1)
				{
					if (this.application.tabBarID == 1)
					{
						BusinessCell.AccessoryView = this.favouritesIndicator;
						BusinessCell.EditingAccessoryView = this.favouritesIndicator;
					}
					else {
						BusinessCell.AccessoryView = this.favouritesIndicator;
						BusinessCell.EditingAccessoryView = this.favouritesIndicator;
					}
				}
			
				//try this code first
				if(indexPath.Row == this.application.indexTableFavourite.Row) {
					Console.WriteLine("index chosen");
					BusinessCell.AccessoryView = this.favouritesIndicator;
					BusinessCell.EditingAccessoryView = this.favouritesIndicator;
				}

				else if(this.application.indexInt.Contains(indexPath.Row) == false) {
					Console.WriteLine("Index is not found");
					BusinessCell.AccessoryView = null;
					BusinessCell.EditingAccessoryView = null;
				}

				else if(this.application.indexInt.Contains(indexPath.Row) == true) {
					Console.WriteLine("Index table chosen _ 1");
					if (indexPath.Row != this.application.indexTableFavourite.Row)
					{
						Console.WriteLine("Index table chosen _ 2");
						BusinessCell.AccessoryView = this.favouritesIndicator;
						BusinessCell.EditingAccessoryView = this.favouritesIndicator;
					}
				}


				//the previously listed indices have accessory views labelled
				//this takes the final index path instead of a range 
				/*	if (indexPath.Row == this.application.indexInt.Find((int obj) => obj >= indexPath.Row)) {
						Console.WriteLine("wtf?");
						BusinessCell.AccessoryView = this.favouritesIndicator;
					}*/

				//try this code. Using logic operators




				/*if(this.application.indexTableFavourite.Row == 0 || this.application.indexTableFavourite.Row == 1) {
					BusinessCell.AccessoryView = this.favouritesIndicator;
					return BusinessCell; 
				}
				else {
					BusinessCell.AccessoryView = null;
					return BusinessCell;
				}*/
				return BusinessCell;
			}

			return BusinessCell;
		}

		public override string TitleForDeleteConfirmation(UITableView tableView, NSIndexPath indexPath)
		{
			return "Unfavourite";
		}

		public override UITableViewCellEditingStyle EditingStyleForRow(UITableView tableView, NSIndexPath indexPath)
		{
				if(tableView.Editing == true) {
					if(this.application.indexInt.Contains(indexPath.Row) == true) {
						if(indexPath.Row != this.application.indexTableFavourite.Row || indexPath.Row == this.application.indexTableFavourite.Row) {
							return UITableViewCellEditingStyle.Delete;
						}
					}

					this.application.cellBusiness.AccessoryView = null;
					this.application.cellBusiness.EditingAccessoryView = null;

					return UITableViewCellEditingStyle.Insert;
				}
				else {
					return UITableViewCellEditingStyle.None;
				}
				return UITableViewCellEditingStyle.None;
		}

		public override void CommitEditingStyle(UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath)
		{
			if(editingStyle == UITableViewCellEditingStyle.Insert) {
				//user clicks the bar button item whateevr he has already favourit as in whaterver exists withint the applications delegate list if the strin already exist the editing saccessory style becomes delete

				if (this.application.localizedText.Count((string arg) => arg.ToString() == this.companyDict[indexPath.Row]) >= 1)
				{
					UIAlertController alreadyFavourited = UIAlertController.Create("Already favourited!", "You have already favourited this phrase!", UIAlertControllerStyle.Alert);

					UIAlertAction confirmed = UIAlertAction.Create("Ok", UIAlertActionStyle.Default, (Action) =>
					{
						alreadyFavourited.Dispose(); 
					});

					alreadyFavourited.AddAction(confirmed); 


					if(this.PresentedViewController == null) {
						this.PresentViewController(alreadyFavourited, true, ()=>{
							AudioToolbox.SystemSound sound = new AudioToolbox.SystemSound(4095);
							sound.PlaySystemSound();
						}); 
					}
					else {
						this.PresentedViewController.DismissViewController(true, () =>
						{
							this.PresentedViewController.Dispose();
							this.PresentViewController(alreadyFavourited, true, ()=>{
								AudioToolbox.SystemSound sound = new AudioToolbox.SystemSound(4095);
								sound.PlaySystemSound();
							});
						});
					}

					Console.WriteLine("The object already exists inside the list");
				}

				else if (this.application.localizedText.Count((string arg) => arg.ToString() == this.companyDict[indexPath.Row]) == 0)
				{
					this.application.localizedText.Add(this.companyDict[indexPath.Row]);
					this.application.frenchText.Add(this.companyTranslatedDict[indexPath.Row]);
					this.application.indexPathsRegister.Add(indexPath);
					this.application.indexPathsInt.Add(indexPath.Row);
					this.favouritesIndicator = new UILabel();

					this.favouritesIndicator.Text = this.favouritesButton.Title; 
					this.favouritesIndicator.MinimumFontSize = 20.0f;
					this.favouritesIndicator.AdjustsFontSizeToFitWidth = true;
					this.favouritesIndicator.Frame = new CoreGraphics.CGRect(0, 20, 40, 40);


					NSIndexPath index = indexPath;
					List<NSIndexPath> indexChosen = new List<NSIndexPath>() { };
					indexChosen.Add(index);

					List<int> indexInt = new List<int>() { };
					indexInt.Add(indexPath.Row);

					this.application.indexInt.Add(indexPath.Row);

					this.application.index = indexPath.Row;

					this.application.indexArray = indexChosen;

					this.application.indexTableFavourite = index;

					this.TableView.ReloadData();
				}
			}
			else if(editingStyle == UITableViewCellEditingStyle.Delete) {
				if (this.application.indexInt.Contains(indexPath.Row) == true)
				{
					this.application.localizedText.RemoveAll((string obj) => obj == this.companyDict[indexPath.Row]);
					this.application.indexInt.RemoveAll((int obj) => obj == indexPath.Row);

					this.application.favourites.RemoveAll((string obj) => obj == this.companyDict[indexPath.Row]);
					this.application.favouritesFrench.RemoveAll((string obj) => obj == this.companyTranslatedDict[indexPath.Row]);

					if (this.application.indexTableFavourite.Row == indexPath.Row || this.application.indexTableFavourite.Row != indexPath.Row)
					{
						this.application.cellBusiness.AccessoryView = null;
						this.application.cellBusiness.EditingAccessoryView = null;
						this.TableView.ReloadData();
					}

					if (this.application.localizedText.Count == 1)
					{
						this.TableView.ReloadData();
					}

					if(this.application.cellBusiness.EditingStyle == UITableViewCellEditingStyle.Insert) {
						this.application.cellBusiness.AccessoryView = null;
						this.application.cellBusiness.EditingAccessoryView = null;
						this.TableView.ReloadData();
					}
					/*if (this.application.localizedText.Count == 0)
					{
						if (this.application.cellBusiness.AccessoryView != null)
						{
							this.application.cellBusiness.AccessoryView = null;
							this.application.cellBusiness.EditingAccessoryView = null;
							this.TableView.ReloadData();
						}
					}*/
				} else {
					this.application.cellBusiness.AccessoryView = null;
					this.application.cellBusiness.EditingAccessoryView = null;
					this.TableView.ReloadData();
				}
				//this.application.localizedText.RemoveAt(this.companyDict.IndexOf(this.companyDict[indexPath.Row]));
				//this.application.indexInt.RemoveAt(this.companyDict.IndexOf(this.companyDict[indexPath.Row]));
				//tableView.ReloadData();
				this.TableView.ReloadData();
			}
		}

		public override nint RowsInSection(UITableView tableView, nint section)
		{
			return this.companyDict.Count;
		}

		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			BatteryMonitor AI = new BatteryMonitor();

			switch (indexPath.Row)
			{
				case 0:
					AI.frenchPhraseBookAI(companyTranslatedDict[0]);
					break;
				case 1:
					AI.frenchPhraseBookAI(companyTranslatedDict[1]);
					break;
				case 2:
					AI.frenchPhraseBookAI(companyTranslatedDict[2]);
					break;
				case 3:
					AI.frenchPhraseBookAI(companyTranslatedDict[3]);
					break;
				case 4:
					AI.frenchPhraseBookAI(companyTranslatedDict[4]);
					break;
				case 5:
					AI.frenchPhraseBookAI(companyTranslatedDict[5]);
					break;
				case 6:
					AI.frenchPhraseBookAI(companyTranslatedDict[6]);
					break;
				case 7:
					AI.frenchPhraseBookAI(companyTranslatedDict[7]);
					break;
				case 8:
					AI.frenchPhraseBookAI(companyTranslatedDict[8]);
					break;
				case 9:
					AI.frenchPhraseBookAI(companyTranslatedDict[9]);
					break;
				case 10:
					AI.frenchPhraseBookAI(companyTranslatedDict[10]);
					break;
				case 11:
					AI.frenchPhraseBookAI(companyTranslatedDict[11]);
					break;
				case 12:
					AI.frenchPhraseBookAI(companyTranslatedDict[12]);
					break;
				case 13:
					AI.frenchPhraseBookAI(companyTranslatedDict[13]);
					break;
				case 14:
					AI.frenchPhraseBookAI(companyTranslatedDict[14]);
					break;
				case 15:
					AI.frenchPhraseBookAI(companyTranslatedDict[15]);
					break;
				case 16:
					AI.frenchPhraseBookAI(companyTranslatedDict[16]);
					break;
				case 17:
					AI.frenchPhraseBookAI(companyTranslatedDict[17]);
					break;
				case 18:
					AI.frenchPhraseBookAI(companyTranslatedDict[18]);
					break;
				case 19:
					AI.frenchPhraseBookAI(companyTranslatedDict[19]);
					break;
				case 20:
					AI.frenchPhraseBookAI(companyTranslatedDict[20]);
					break;
				case 21:
					AI.frenchPhraseBookAI(companyTranslatedDict[21]);
					break;
				case 22:
					AI.frenchPhraseBookAI(companyTranslatedDict[22]);
					break;
				case 23:
					AI.frenchPhraseBookAI(companyTranslatedDict[23]);
					break;
				case 24:
					AI.frenchPhraseBookAI(companyTranslatedDict[24]);
					break;
				case 25:
					AI.frenchPhraseBookAI(companyTranslatedDict[25]);
					break;
				case 26:
					AI.frenchPhraseBookAI(companyTranslatedDict[26]);
					break;
				case 27:
					AI.frenchPhraseBookAI(companyTranslatedDict[27]);
					break;
				case 28:
					AI.frenchPhraseBookAI(companyTranslatedDict[28]);
					break;
				case 29:
					AI.frenchPhraseBookAI(companyTranslatedDict[29]);
					break;
				case 30:
					AI.frenchPhraseBookAI(companyTranslatedDict[30]);
					break;
				case 31:
					AI.frenchPhraseBookAI(companyTranslatedDict[31]);
					break;
				case 32:
					AI.frenchPhraseBookAI(companyTranslatedDict[32]);
					break;
				case 33:
					AI.frenchPhraseBookAI(companyTranslatedDict[33]);
					break;
				case 34:
					AI.frenchPhraseBookAI(companyTranslatedDict[34]);
					break;
				case 35:
					AI.frenchPhraseBookAI(companyTranslatedDict[35]);
					break;
				case 36:
					AI.frenchPhraseBookAI(companyTranslatedDict[36]);
					break;
				case 37:
					AI.frenchPhraseBookAI(companyTranslatedDict[37]);
					break;
				case 38:
					AI.frenchPhraseBookAI(companyTranslatedDict[38]);
					break;
				case 39:
					AI.frenchPhraseBookAI(companyTranslatedDict[39]);
					break;
				case 40:
					AI.frenchPhraseBookAI(companyTranslatedDict[40]);
					break;
				case 41:
					AI.frenchPhraseBookAI(companyTranslatedDict[41]);
					break;
				case 42:
					AI.frenchPhraseBookAI(companyTranslatedDict[42]);
					break;
				case 43:
					AI.frenchPhraseBookAI(companyTranslatedDict[43]);
					break;
				case 44:
					AI.frenchPhraseBookAI(companyTranslatedDict[44]);
					break;
				case 45:
					AI.frenchPhraseBookAI(companyTranslatedDict[45]);
					break;
				case 46:
					AI.frenchPhraseBookAI(companyTranslatedDict[46]);
					break;
				case 47:
					AI.frenchPhraseBookAI(companyTranslatedDict[47]);
					break;
				case 48:
					AI.frenchPhraseBookAI(companyTranslatedDict[48]);
					break;
				case 49:
					AI.frenchPhraseBookAI(companyTranslatedDict[49]);
					break;
				case 50:
					AI.frenchPhraseBookAI(companyTranslatedDict[50]);
					break;
				case 51:
					AI.frenchPhraseBookAI(companyTranslatedDict[51]);
					break;
				case 52:
					AI.frenchPhraseBookAI(companyTranslatedDict[52]);
					break;
				case 53:
					AI.frenchPhraseBookAI(companyTranslatedDict[53]);
					break;
				case 54:
					AI.frenchPhraseBookAI(companyTranslatedDict[54]);
					break;
				case 55:
					AI.frenchPhraseBookAI(companyTranslatedDict[55]);
					break;
				case 56:
					AI.frenchPhraseBookAI(companyTranslatedDict[56]);
					break;
				case 57:
					AI.frenchPhraseBookAI(companyTranslatedDict[57]);
					break;
				case 58:
					AI.frenchPhraseBookAI(companyTranslatedDict[58]);
					break;
				case 59:
					AI.frenchPhraseBookAI(companyTranslatedDict[59]);
					break;
				case 60:
					AI.frenchPhraseBookAI(companyTranslatedDict[60]);
					break;
				case 61:
					AI.frenchPhraseBookAI(companyTranslatedDict[61]);
					break;
				case 62:
					AI.frenchPhraseBookAI(companyTranslatedDict[62]);
					break;
				case 63:
					AI.frenchPhraseBookAI(companyTranslatedDict[63]);
					break;
				case 64:
					AI.frenchPhraseBookAI(companyTranslatedDict[64]);
					break;
				case 65:
					AI.frenchPhraseBookAI(companyTranslatedDict[65]);
					break;
				case 66:
					AI.frenchPhraseBookAI(companyTranslatedDict[66]);
					break;
				case 67:
					AI.frenchPhraseBookAI(companyTranslatedDict[67]);
					break;
				case 68:
					AI.frenchPhraseBookAI(companyTranslatedDict[68]);
					break;
				case 69:
					AI.frenchPhraseBookAI(companyTranslatedDict[69]);
					break;
				case 70:
					AI.frenchPhraseBookAI(companyTranslatedDict[70]);
					break;
				default:
					Console.WriteLine("No key selected");
					break;
			}
			tableView.DeselectRow(indexPath, true);
		}
	}


}

